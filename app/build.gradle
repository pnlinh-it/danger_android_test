plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'io.gitlab.arturbosch.detekt'
    id "org.jlleitschuh.gradle.ktlint"
}

apply from: "${rootProject.projectDir}/gradle/ktlint.gradle"

android {
    compileSdkVersion 32
    buildToolsVersion "32.0.0"

    defaultConfig {
        applicationId "com.pnlinh.hello.danger_test"
        minSdkVersion 21
        targetSdkVersion 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
    lint {
        abortOnError false
        absolutePaths true
        checkAllWarnings true
        checkReleaseBuilds true
        disable 'TypographyFractions', 'TypographyQuotes'
        enable 'RtlHardcoded', 'RtlCompat', 'RtlEnabled'
        error 'Wakelock', 'TextViewEdits'
        fatal 'NewApi', 'InlinedApi'
        htmlOutput file('build/reports/lint/lint-results.html')
        htmlReport true
        ignore 'TypographyQuotes'
        lintConfig file('default-lint.xml')
        noLines true
        quiet true
        showAll true
        textOutput file('stdout')
        textReport false
        warning 'ResourceAsColor'
        warningsAsErrors true
        xmlOutput file('build/reports/lint/lint-results.xml')
        xmlReport true
    }
    namespace 'com.pnlinh.android.danger_test'
    // https://developer.android.com/studio/write/lint#sample-lint.xml-file
    // https://stackoverflow.com/a/31128939/14284081
    // For old version
//    lintOptions {
//        // set to true to turn off analysis progress reporting by lint
//        quiet true
//        // if true, stop the gradle build if errors are found
//        abortOnError false
//        // if true, only report errors
//        // ignoreWarnings true
//        // if true, emit full/absolute paths to files with errors (true by default)
//        absolutePaths true
//        // if true, check all issues, including those that are off by default
//        checkAllWarnings true
//        // if true, treat all warnings as errors
//        warningsAsErrors true
//        // turn off checking the given issue id's
//        disable 'TypographyFractions','TypographyQuotes'
//        // turn on the given issue id's
//        enable 'RtlHardcoded','RtlCompat', 'RtlEnabled'
//        // check *only* the given issue id's
//        // check 'NewApi', 'InlinedApi'
//        // if true, don't include source code lines in the error output
//        noLines true
//        // if true, show all locations for an error, do not truncate lists, etc.
//        showAll true
//        // Fallback lint configuration (default severities, etc.)
//        lintConfig file("default-lint.xml")
//        // if true, generate a text report of issues (false by default)
//        textReport false
//        // location to write the output; can be a file or 'stdout'
//        textOutput 'stdout'
//        // if true, generate an XML report for use by for example Jenkins
//        xmlReport true
//        // file to write report to (if not specified, defaults to lint-results.xml)
//        xmlOutput file("build/reports/lint/lint-results.xml")
//        // if true, generate an HTML report (with issue explanations, sourcecode, etc)
//        htmlReport true
//        // optional path to report (default will be lint-results.html in the builddir)
//        htmlOutput file("build/reports/lint/lint-results.html")
//        // set to true to have all release builds run lint on issues with severity=fatal
//        // and abort the build (controlled by abortOnError above) if fatal issues are found
//        checkReleaseBuilds true
//        // Set the severity of the given issues to fatal (which means they will be
//        // checked during release builds (even if the lint target is not included)
//        fatal 'NewApi', 'InlinedApi'
//        // Set the severity of the given issues to error
//        error 'Wakelock', 'TextViewEdits'
//        // Set the severity of the given issues to warning
//        warning 'ResourceAsColor'
//        // Set the severity of the given issues to ignore (same as disabling the check)
//        ignore 'TypographyQuotes'
//    }
}


// https://github.com/jlleitschuh/ktlint-gradle#configuration
ktlint {
    version = "0.45.2"
    debug = true
    verbose = true
    android = true
    outputToConsole = true
    outputColorName = "RED"
    ignoreFailures = true
    enableExperimentalRules = true
    // additionalEditorconfigFile = file("/some/additional/.editorconfig")
    disabledRules = ["final-newline"]
    baseline = file("my-project-ktlint-baseline.xml")
    reporters {
        reporter "checkstyle"
        reporter "json"

        // customReporters {
        //     "csv" {
        //         fileExtension = "csv"
        //         dependency = project(":project-reporters:csv-reporter")
        //     }
        //     "yaml" {
        //         fileExtension = "yml"
        //         dependency = "com.example:ktlint-yaml-reporter:1.0.0"
        //     }
        // }
    }
    // kotlinScriptAdditionalPaths {
    //     include fileTree("scripts/")
    // }
    filter {
        exclude("**/generated/**")
        include("**/kotlin/**")
    }
}
// https://github.com/jlleitschuh/ktlint-gradle#setting-reports-output-directory
tasks.withType(org.jlleitschuh.gradle.ktlint.tasks.GenerateReportsTask) {
    reportsOutputDirectory = project.layout.buildDirectory.dir("reports/ktlint")
}

//dependencies {
//    ktlintRuleset "com.github.username:rulseset:master-SNAPSHOT"
//    ktlintRuleset files("/path/to/custom/rulseset.jar")
//    ktlintRuleset project(":chore:project-ruleset")
//}

// https://detekt.dev/docs/gettingstarted/gradle/#groovy-dsl-3
detekt {
    // Version of Detekt that will be used. When unspecified the latest detekt
    // version found will be used. Override to stay on the same version.
    // toolVersion = "[detekt_version]"

    // The directories where detekt looks for source files.
    // Defaults to `files("src/main/java", "src/test/java", "src/main/kotlin", "src/test/kotlin")`.
    source = files("src/main/java", "src/main/kotlin")

    // Builds the AST in parallel. Rules are always executed in parallel.
    // Can lead to speedups in larger projects. `false` by default.
    parallel = false

    // Define the detekt configuration(s) you want to use.
    // Defaults to the default detekt configuration.
    // https://github.com/detekt/detekt/blob/main/detekt-core/src/main/resources/default-detekt-config.yml
    // https://detekt.dev/docs/introduction/configurations/
    config = files("detekt-config.yml")

    // Applies the config files on top of detekt's default config file. `false` by default.
    buildUponDefaultConfig = false

    // Turns on all the rules. `false` by default.
    allRules = false

    // Specifying a baseline file. All findings stored in this file in subsequent runs of detekt.
    baseline = file("path/to/baseline.xml")

    // Disables all default detekt rulesets and will only run detekt with custom rules
    // defined in plugins passed in with `detektPlugins` configuration. `false` by default.
    disableDefaultRuleSets = false

    // Adds debug output during task execution. `false` by default.
    debug = false

    // If set to `true` the build does not fail when the
    // maxIssues count was reached. Defaults to `false`.
    ignoreFailures = true

    // Android: Don't create tasks for the specified build types (e.g. "release")
    // ignoredBuildTypes = listOf("release")

    // Android: Don't create tasks for the specified build flavor (e.g. "production")
    // ignoredFlavors = listOf("production")

    // Android: Don't create tasks for the specified build variants (e.g. "productionRelease")
    // ignoredVariants = listOf("productionRelease")

    // Specify the base path for file paths in the formatted reports.
    // If not set, all file paths reported will be absolute file path.
    basePath = projectDir
}

// https://detekt.dev/docs/gettingstarted/gradle/#reports
tasks.named("detekt").configure {
    reports {
        // Enable/Disable XML report (default: true)
        xml.required.set(true)
        xml.outputLocation.set(file("build/reports/detekt/detekt.xml"))
        // Enable/Disable HTML report (default: true)
        html.required.set(false)
        html.outputLocation.set(file("build/reports/detekt/detekt.html"))
        // Enable/Disable TXT report (default: true)
        txt.required.set(false)
        txt.outputLocation.set(file("build/reports/detekt/detekt.txt"))
        // Enable/Disable SARIF report (default: false)
        sarif.required.set(false)
        sarif.outputLocation.set(file("build/reports/detekt/detekt.sarif"))
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'

    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0'
}